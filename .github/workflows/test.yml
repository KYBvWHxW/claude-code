name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: "0 17 * * *"   # 每天 01:00 SGT（UTC 17:00）

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install "pytest==8.*" "schemathesis==3.*" "requests>=2.25.0"
        pip install -r requirements.txt

    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

    - name: Start uvicorn server
      run: |
        nohup python -m uvicorn app:app --host 127.0.0.1 --port 8000 > uvicorn.log 2>&1 &
        echo $! > uvicorn.pid

    - name: Wait for server availability
      run: |
        for i in {1..30}; do
          if curl -f http://127.0.0.1:8000/live > /dev/null 2>&1; then
            echo "Server is ready after $i attempts"
            break
          fi
          echo "Waiting for server... attempt $i/30"
          sleep 2
        done
        if ! curl -f http://127.0.0.1:8000/live > /dev/null 2>&1; then
          echo "Server failed to start"
          tail -50 uvicorn.log
          exit 1
        fi

    - name: Run pytest
      run: |
        pytest -q tests/
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Run schemathesis e2e tests
      run: |
        schemathesis run --hypothesis-max-examples 50 http://127.0.0.1:8000/openapi.json

    - name: Cleanup on failure
      if: failure()
      run: |
        echo "=== UVICORN LOG (last 50 lines) ==="
        tail -50 uvicorn.log || echo "No uvicorn log found"
        echo "=== PROCESS STATUS ==="
        ps aux | grep uvicorn || echo "No uvicorn process found"

    - name: Stop uvicorn server
      if: always()
      run: |
        if [ -f uvicorn.pid ]; then
          kill $(cat uvicorn.pid) || true
          rm uvicorn.pid
        fi
        pkill -f "uvicorn app:app" || true

    - name: Build Docker image
      run: |
        docker build -t langgraph-gradio-starter .